openapi: 3.0.1
info:
  title: SimpleAPI
  description: Simplifique a autenticação e a integração de serviços.
  contact: {}
  version: 1.0.0
servers:
- url: https://simpleapi.com.br/api/v1
paths:
  /client/user:
    get:
      tags:
      - Client Users
      summary: Get all client users by ownerId
      description: "Retrieves a list of all client users associated with the authenticated\
        \ client's API key, with pagination support"
      parameters:
      - name: Authorization
        in: header
        description: "Bearer token required. Example: 'Bearer sk-abc123XYZ...'"
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of users per page
        schema:
          type: integer
          default: 10
      responses:
        "200":
          description: List of client users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client.PaginatedClientUsersResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - Client Users
      summary: Create a new client user
      description: Creates a new user associated with the authenticated client's API key
      security:
        - bearerAuth: []
      requestBody:
        description: Client user details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/client.CreateClientUserRequest'
        required: true
      responses:
        "201":
          description: Created client user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client.ClientUserResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
  /client/user/auth/login:
    post:
      tags:
      - Client Users
      summary: Client User login
      description: Authenticates a user and returns a JWT token if the credentials
        are correct. The token expires in 02 hours.
      parameters:
      - name: Authorization
        in: header
        description: "Bearer token required. Example: 'Bearer sk-abc123XYZ...'"
        required: true
        schema:
          type: string
      requestBody:
        description: Auth details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/client.AuthUserRequest'
        required: true
      responses:
        "200":
          description: JWT token generated successfully. Token expires in 02 hours.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth.AuthResponse'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Failed to generate token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: user
  /client/user/auth/validation-token:
    post:
      tags:
      - Client Users
      summary: Validate JWT token
      description: "Validates the provided JWT token and confirms it is active. Example\
        \ body request: \"token\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\""
      parameters:
      - name: Authorization
        in: header
        description: "Bearer token required. Example: 'Bearer sk-abc123XYZ...'"
        required: true
        schema:
          type: string
      requestBody:
        description: Auth details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/client.LoginClientUserRequest'
        required: true
      responses:
        "200":
          description: JWT token is valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.SuccessWithMsgResponse'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Failed to valid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: user
  /client/user/{id}:
    get:
      tags:
      - Client Users
      summary: Get a client user by ID
      description: "Retrieves the details of a client user using their ID, associated\
        \ with the authenticated client's API key"
      parameters:
      - name: Authorization
        in: header
        description: "Bearer token required. Example: 'Bearer sk-abc123XYZ...'"
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Client user ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Client user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client.ClientUserResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
    put:
      tags:
      - Client Users
      summary: Update an existing client user
      description: Updates the authenticated client's user data. Password is optional.
      parameters:
      - name: Authorization
        in: header
        description: "Bearer token required. Example: 'Bearer sk-abc123XYZ...'"
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
      requestBody:
        description: Updated client user details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/client.CreateClientUserRequest'
        required: true
      responses:
        "200":
          description: Updated client user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client.ClientUserResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: clientUser
    delete:
      tags:
      - Client Users
      summary: Delete a client user
      description: Deletes a user by ID associated with the authenticated client's
        API key
      parameters:
      - name: Authorization
        in: header
        description: "Bearer token required. Example: 'Bearer sk-abc123XYZ...'"
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.SuccessWithMsgResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /status:
    get:
      tags:
      - Status
      summary: Get the status of the API
      description: "Returns a simple status message indicating the API is running,"
      responses:
        "200":
          description: API status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status.StatusResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
components:
  schemas:
    apikey.APIKeyResponse:
      type: object
      properties:
        apiKey:
          type: string
        message:
          type: string
    apikey.DeleteAPIKeyResponse:
      type: object
      properties:
        message:
          type: string
    auth.AuthResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/auth.Token'
        success_code:
          type: integer
    auth.AuthUserRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          minLength: 6
          type: string
    auth.Token:
      type: object
      properties:
        token:
          type: string
    client.AuthUserRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          minLength: 6
          type: string
    client.ClientUserResponse:
      type: object
      properties:
        created_at:
          type: string
        email:
          type: string
        id:
          type: string
        is_active:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
        roles:
          type: array
          items:
            type: string
        updated_at:
          type: string
    client.CreateClientUserRequest:
      required:
      - email
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 2
          type: string
          example: Maria Oliveira
        email:
          type: string
          format: email
          example: maria@email.com
        password:
          maxLength: 100
          minLength: 6
          type: string
          example: senha456
        roles:
          type: array
          items:
            type: string
          example: ["viewer", "adm"]
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            field: "abcde"
            field1: "abcde"
            field2: "abcde"
    client.LoginClientUserRequest:
      required:
      - token
      type: object
      properties:
        token:
          minLength: 6
          type: string
    client.PaginatedClientUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/client.ClientUserResponse'
        limit:
          type: integer
        page:
          type: integer
        total:
          type: integer
    status.StatusResponse:
      type: object
      properties:
        apiStatus:
          type: string
        applicationVersion:
          type: string
        databaseStatus:
          type: string
    users.CreateUserRequest:
      required:
      - email
      - name
      - password
      type: object
      properties:
        email:
          type: string
        name:
          maxLength: 50
          minLength: 3
          type: string
        password:
          maxLength: 100
          minLength: 6
          type: string
    users.ResendVerificationCodeRequest:
      required:
      - email
      type: object
      properties:
        email:
          type: string
    users.ResetPasswordRequest:
      required:
      - code
      - email
      type: object
      properties:
        code:
          type: string
        email:
          type: string
        password:
          maxLength: 100
          minLength: 6
          type: string
    users.UpdateUserRequest:
      type: object
      properties:
        isActive:
          type: boolean
        name:
          maxLength: 50
          minLength: 2
          type: string
        password:
          maxLength: 100
          minLength: 6
          type: string
    users.UsageLimitsResponse:
      type: object
      properties:
        api_requests:
          type: integer
    users.UserResponse:
      type: object
      properties:
        created_at:
          type: string
        email:
          type: string
        id:
          type: string
        is_active:
          type: boolean
        is_email_verified:
          type: boolean
        name:
          type: string
        plan_expiration_date:
          type: string
        plan_type:
          type: string
        updated_at:
          type: string
        usage_limits:
          $ref: '#/components/schemas/users.UsageLimitsResponse'
    users.VerifyEmailRequest:
      required:
      - code
      - email
      type: object
      properties:
        code:
          type: string
        email:
          type: string
    utils.ErrorResponse:
      type: object
      properties:
        errorCode:
          type: integer
        message:
          type: string
    utils.SuccessResponse:
      type: object
      properties:
        data:
          type: object
        success_code:
          type: integer
    utils.SuccessWithMsgResponse:
      type: object
      properties:
        message:
          type: string
        successCode:
          type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
x-original-swagger-version: "2.0"
