openapi: 3.0.1
info:
  title: SimpleAPI
  description: Simplifique a autenticação e a integração de serviços.
  contact: {}
  version: 1.0.0
servers:
- url: https://simpleapi.com.br/api/v1
paths:
  /client/user:
    get:
      tags:
      - Client Users
      summary: Obter todos os usuários do cliente por ownerId
      description: "Recupera uma lista de todos os usuários do cliente associados à chave de API do cliente autenticado, com suporte a paginação"
      security:
        - bearerAuth: []
      parameters:
      - name: page
        in: query
        description: Número da página
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        description: Quantidade de usuários por página
        schema:
          type: integer
          default: 10
      responses:
        "200":
          description: Lista de usuários do cliente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client.PaginatedClientUsersResponse'
        "400":
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
    post:
      tags:
      - Client Users
      summary: Criar um novo usuário de cliente
      description: Cria um novo usuário associado à chave de API do cliente autenticado
      security:
        - bearerAuth: []
      requestBody:
        description: Detalhes do usuário do cliente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/client.CreateClientUserRequest'
        required: true
      responses:
        "201":
          description: Usuário do cliente criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client.ClientUserResponse'
        "400":
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
  /client/user/auth/login:
    post:
      tags:
      - Client Users
      summary: Login do usuário do cliente
      description: Autentica um usuário e retorna um token JWT se as credenciais estiverem corretas. O token expira em 2 horas.
      security:
        - bearerAuth: []
      requestBody:
        description: Dados de autenticação
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/client.AuthUserRequest'
        required: true
      responses:
        "200":
          description: Token JWT gerado com sucesso. Expira em 2 horas.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth.AuthResponse'
        "400":
          description: Entrada inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "401":
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Falha ao gerar o token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
  /client/user/auth/validation-token:
    post:
      tags:
      - Client Users
      summary: Validar token JWT
      description: "Valida o token JWT fornecido e confirma se está ativo. Exemplo de corpo da requisição: \"token\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\""
      security:
        - bearerAuth: []
      requestBody:
        description: Dados de autenticação
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/client.LoginClientUserRequest'
        required: true
      responses:
        "200":
          description: Token JWT é válido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client.ValidTokenResponse'
        "400":
          description: Entrada inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "401":
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Falha ao validar o token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
  /client/user/{id}:
    get:
      tags:
      - Client Users
      summary: Obter um usuário do cliente por ID
      description: "Recupera os detalhes de um usuário do cliente utilizando seu ID, associado à chave de API do cliente autenticado"
      security:
        - bearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID do usuário do cliente
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Dados do usuário do cliente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client.ClientUserResponse'
        "400":
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "404":
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
    put:
      tags:
      - Client Users
      summary: Atualizar um usuário do cliente existente
      description: Atualiza os dados do usuário do cliente autenticado. A senha é opcional.
      security:
        - bearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID do usuário
        required: true
        schema:
          type: string
      requestBody:
        description: Dados atualizados do usuário do cliente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/client.CreateClientUserRequest'
        required: true
      responses:
        "200":
          description: Usuário do cliente atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/client.ClientUserResponse'
        "400":
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "401":
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "403":
          description: Acesso proibido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
    delete:
      tags:
      - Client Users
      summary: Excluir um usuário do cliente
      description: Exclui um usuário pelo ID associado à chave de API do cliente autenticado
      security:
        - bearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID do usuário
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Usuário excluído com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.SuccessWithMsgResponse'
        "400":
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
  /status:
    get:
      tags:
      - Status
      summary: Obter o status da API
      description: Retorna uma mensagem simples de status indicando que a API está em execução.
      responses:
        "200":
          description: Status da API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status.StatusResponse'
        "400":
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
        "500":
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/utils.ErrorResponse'
components:
  schemas:
    client.ValidTokenResponse:
      type: object
      properties:
        isValid:
          type: boolean
          example: true
        success_code:
          type: integer
          example: 200
        user:
          $ref: '#/components/schemas/client.ClientUserResponse'
    auth.AuthResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/auth.Token'
        success_code:
          type: integer
    auth.Token:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDY2NTM2NTUsInVzZXJfaWQiOiI2ODE5NGNiOWRlMGVmZGQzMTk1OGE3ODEifQ
    client.AuthUserRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          example: maria@email.com
        password:
          minLength: 6
          type: string
          example: abcd1234
    client.ClientUserResponse:
      type: object
      properties:
        id:
          type: string
          example: "68194cb9de0efdd31958a456908"
        email:
          type: string
          example: maria@email.com
        name:
          type: string
          example: Maria Oliveira
        roles:
          type: array
          items:
            type: string
          example: ["viewer", "adm"]
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            field: "abcde"
            field1: "abcde"
            field2: "abcde"
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          example: "2025-05-05T23:41:45.619Z"
        updated_at:
          type: string
          example: "2025-05-05T23:41:45.619Z"
    client.CreateClientUserRequest:
      required:
      - email
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 2
          type: string
          example: Maria Oliveira
        email:
          type: string
          format: email
          example: maria@email.com
        password:
          maxLength: 100
          minLength: 6
          type: string
          example: senha456
        roles:
          type: array
          items:
            type: string
          example: ["viewer", "adm"]
        metadata:
          type: object
          additionalProperties:
            type: string
          example:
            field: "abcde"
            field1: "abcde"
            field2: "abcde"
    client.LoginClientUserRequest:
      required:
      - token
      type: object
      properties:
        token:
          minLength: 6
          type: string
          example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NDY2NTM2NTUsInVzZXJfaWQiOiI2ODE5NGNiOWRlMGVmZGQzMTk1OGE3ODEifQ.n-S2PChM2pFXNfOwq0lfjfNMFIkCfvaPoTUby_MhS84"
    client.PaginatedClientUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/client.ClientUserResponse'
        limit:
          type: integer
          example: 20
        page:
          type: integer
          example: 1
        total:
          type: integer
          example: 10
    status.StatusResponse:
      type: object
      properties:
        apiStatus:
          type: string
        applicationVersion:
          type: string
        databaseStatus:
          type: string
    utils.ErrorResponse:
      type: object
      properties:
        errorCode:
          type: integer
        message:
          type: string
          example: "Invalid request"
    utils.SuccessWithMsgResponse:
      type: object
      properties:
        message:
          type: string
          example: "Query successfully completed"
        successCode:
          type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
x-original-swagger-version: "2.0"
